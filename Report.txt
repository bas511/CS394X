Abstract – Ms. Pac-Man has long been a benchmark for testing software-playing artificial intelligence agents. This paper examines an algorithm used to play the game, as well as multiple variants of the algorithm. Using neuroevolution, optimal parameters were found and the best results from each algorithm, as well as results from attempts by human players using the same strategy, were compared. [SAVE THIS PART FOR RESULTS]
I.	INTRODUCTION
Video games have long been used to analyze Artificial Intelligence (AI) algorithms. One of the most popular genres of games to test algorithms are maze games, due to the necessity of pathfinding and the likely presence of some form of obstacle avoidance. Pac-Man, one of the first and undoubtedly the most universally recognized of these games, has been the subject of much research in game-playing AI. This is partly because of its quality of being simple enough to allow for significant research to be done while complex enough to require somewhat intensive algorithms. However, some aspects of the game lend itself to be rather trivial for AI software controllers to succeed, even at a high level. However, Ms. Pac-Man, a variant on the original game format, proves to be a better-suited challenge for an AI controller, due to its non-deterministic nature. The lower level of predictability in ghost behavior provides more use in examining different approaches.
As artificial intelligence controllers are perfected through years of work by various teams and individuals, the implementations tend to converge to similar strategies.  Most video games are designed in such a way that a particular technique for winning outperforms all other time and time again.  As a result, many of the winning controllers form a very homogenous population.  In conducting this research, our goal is to test an inventive strategy and see whether or not it holds up to more popular and common methods of Pac-man control.
Researching the success of different types of artificial intelligence in gaming is important because of the significance that modern video gaming and its associated technologies has on society in the current day and age.  Successfully programming a controller than can avoid ghosts in a maze may seem trivial to some, but the applied strategies can be extrapolated for more complex pathfinding and combatant avoidance, which in in turn can influence intelligence in scenarios more relevant to the real world.
II. 	BACKGROUND
The world of artificial intelligence for gaming is no stranger to Pac-Man; Pacman VS Ghosts, a renowned competition designed to pit the best player and ghost AIs against each other, ran annually until 2012.
The framework being used for this paper is called Ms. Pacman AI .NET.  It is implemented in C# and was used for a competition at IEEE’s World Congress on Computational Intelligence in 2008.  The source code for the framework is packaged with a few sample controllers, including one that implements Dijkstra’s algorithm for pathfinding between points on the map.  Also included is the functionality to simulate multiple games in succession in the console without the added delay caused by the Ms. Pac-Man GUI.  This method simply outputs the score of the controller, making mass data collection very straightforward and less time-consuming.  By modifying a blank controller and utilizing the vanilla Ms. Pac-Man simulator provided, we were able to implement our own strategy with ease.
III. 	GAME DESIGN
Ms. Pac-Man, released in 1982 by publisher Midway Manufacturing, is an arcade-style survival game in which players must collect pills while avoiding collision with any of the game’s four colored ghosts, Blinky (Red), Pinky (Pink), Inky (Blue), and Sue (Orange).  In addition, there are four (4) power pellets located in the corners of the map.  For a brief period of time following the collected of a power pellet, the player is invincible and has the ability to eat the ghosts as they flee.  
The game is based of its predecessor, Pac-Man, which features the same general mechanics amidst several design changes.  For the purposes of AI development, only two of these changes are relevant; Ms. Pac-Man’s map features two tunnels to wrap around the map compared to Pac-Man’s one, and the ghosts in Ms. Pac-Man are designed with an element of randomness to their movements, which ensures that the player cannot simply implement a pattern-based strategy to succeed.
The scoring in Ms. Pac-Man is simple.  For collecting a pellet, the player receives 10 points.  During the period of invincibility associated with the power pill, eaten ghosts provide a point bonus of 200 * n, with n being the number of ghosts that have been eaten.  Once all the pills have been eaten, the game resets, and the ghosts, Ms. Pac-Man, and the pills all return to their former places.  
IV.	METHODS
Our controller combines a greedy strategy with a unique ghost avoidance strategy to attempt to clear the board of pellets as quickly as possible.  In our analysis of various Ms. Pac-Man strategies, we determined that passing back over areas with no pellets in order to chase ghosts for the 200, 400, 600, and 800 points they can potentially provide is less productive than obtaining a fresh playing field to work with since the first 300 or so points worth of pellets are very easy to obtain quickly and without dying.  To prevent the player from being trapped with ghosts on all sides, we implemented a “dead zone” at the center of the map, which contains the ghost spawner, giving it an increased element of risk, as this is also where the ghosts emerge after being eaten.  This area also is not home to any pellets, so moving through it is much less productive than traveling up and down the map through the long side corridors and tunnels.
V.	RESULTS
Gotta
VI.	DISCUSSION
Gotta tell ‘em all.
VII.	REFERENCES
Gotta cite ‘em all.


